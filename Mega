  // Smartplant.ino
  // Created by LS,JB
#include <Wire.h>
#include <Stepper.h>
#include <millisDelay.h>
#include "DHT.h" // DHT11 Sensor

#define DHTPIN 3
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

int SPU = 2048;
Stepper Motor(SPU, 4,6,5,7); // Der Schrittmotor erhält die Bezeichnung "Motor" und es wird angegeben an welchen Pins der Motor angeschlossen ist.

millisDelay stepperTimer;
millisDelay offsetTimer;
int stepperTime;
bool stopHudifi = false;
bool startHudifi = false;
bool startHudifi2 = false;

int lightSensorPin = A14; // Photoresistor/Lichtsensor B30
int relayPin = 47; // ALLNET 5V Relay Modul B02
int ledPin = 2;

int light;
int humidity;
int temperature;

int adress;


void setup() {

  Serial.begin(9600);   // Starten der seriellen Übertragung

  Motor.setSpeed(10);

  pinMode(lightSensorPin, INPUT);
  pinMode(relayPin, OUTPUT);
  pinMode(ledPin, OUTPUT);

  dht.begin();   // DHT11 Sensor wird gestartet

  Wire.begin(4); // I2C-Adresse des Slaves
  Wire.onRequest(requestEvent); // Event-Handler für Requests vom Master
  Wire.onReceive(receiveEvent);

  Serial.println("Setup abgeschlossen!");   // Initiale Ausgabe
}

void loop() {
  readLightSensor(); // Lichtsensor auslesen und verarbeiten
  readDHTSensor();   // DHT11 Sensor auslesen und verarbeiten
  if (startHudifi){
    controlHudifi(stepperTime);
  }
  if (startHudifi2){
    controlHudifi2();
  }
  delay(1000);   // Kurze Pause zwischen den Messungen
}


/////// sensors ///////

void readLightSensor() {
  int rawValue = analogRead(lightSensorPin);
  float lightV = rawValue * (5.0 / 1023) * 1000/50;
  light = (int) (lightV);
  float resistance = 10000 * (lightV / (5000.0 - lightV)); // 5V wenn dunkel 50mV hell Schwellenwert 2000mV

  /*
  Serial.print("Lichtsensor: ");
  Serial.println(light);

  
  Serial.print(" mV, Widerstandswert: ");
  Serial.print(resistance);
  Serial.println(" Ohm");
  Serial.println("---------------------------------------");
  */
}

void readDHTSensor() {
  // Wartezeit vor dem Auslesen des DHT11 Sensors

  humidity = dht.readHumidity();
  temperature = dht.readTemperature();

  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
}


/////// communication ///////

void requestEvent(){
  Wire.write(sensorString(String(light), String(humidity), String(temperature), 4).c_str());
}

void receiveEvent(){
  adress = Wire.read() - '0'; 

  String dataStr;
  while(Wire.available()){
    dataStr += (char) Wire.read();
    //data += Wire.read();
  }
  dataStr = removeCharFromString(dataStr, 'x');
  int data = dataStr.toInt();

  switch (adress)  {
    case 0:
        controlLED(data);
        break;

    case 1:
        controlRelay(data);
        break;

    case 2:
        if (data == 0) stopHudifi = true;
        else {
          stopHudifi = false;
          startHudifi = true;
          stepperTime = data;
        }
        break;

    case 3:
            Serial.println("Stepper received");
            startHudifi2 = true;
            break;

    default:
        Serial.print("/////////////// WRONG ADRESS! ///////////////");
  }
}


/////// devices ///////

void controlRelay(int state) {
  if (state == 0){
      digitalWrite(relayPin, LOW);
  }
  else if (state == 1){
      digitalWrite(relayPin, HIGH);
  }
  else if (state == 2){
    // AUTOMATION
  }
  else {
    Serial.print("/////////////// Relay data wrong! ///////////////");
  }
}

void controlLED(int brightness){
  brightness = map(brightness, 0, 100, 0, 255);
  analogWrite(ledPin, brightness);
}

void controlHudifi(int t){
  startHudifi = false; 
  Serial.print("Hudifi timer: ");
  Serial.println(t);
  stepperTimer.start(t*1000);
  while(!stepperTimer.justFinished() && !stopHudifi){
    Motor.step(SPU/4);
    delay(100);
    Motor.step(-SPU/4);
    delay(100);
  }
}
void controlHudifi2(){
  startHudifi2 = false;
  Motor.step((int) (SPU/20));
  Serial.println("Stepper initiated");
}
  

/////// help functions ///////

String removeCharFromString(String inputString, char charToRemove) {
    String result;
    for (char c : inputString) {
        if (c != charToRemove) {
            result += c;
        }
    }
    return result;
}

String sensorString(String light, String humidity, String temperature, int dataSize){
  String data = fillX(light, dataSize);
  data += fillX(humidity, dataSize);
  data += fillX(temperature, dataSize);
  return data;
}

String fillX(String data, int size){
  String dataNew;
  int xAmount = size - data.length();
  for(int i = 1; i<= xAmount; i++){
    dataNew += "x";
  }
  dataNew += data;
  return dataNew;
}
